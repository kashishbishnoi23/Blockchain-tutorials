{
	"id": "adc8fe4be9f73cfee59e2e476c9ee53b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"Constructor.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\n\r\n// defining the versions for which this code will work\r\npragma solidity > 0.5.0 <= 0.9.0;\r\n\r\ncontract constructors{\r\n    uint age;\r\n\r\n    // constructor ek function hota hai -> jo tab call hota hai jab hamara contract first time deploy hota hai, it is used to intialise state variables\r\n    // basically ham iska use ek aur kam k liye bhi krte hain -> contract ka owner decide krne ke liye\r\n\r\n    // constructor sirf ek baar execute hota hai\r\n    // You can create only one constructor and that is also optional\r\n    // A default constructor is created by compiler if there's no explictly defined constructor\r\n\r\n/*\r\n    constructor(){\r\n        age=23;\r\n    }\r\n    */\r\n  \r\n\r\n  // we can pass parameters to constructor as well\r\n    constructor(uint newage){\r\n        age=newage;\r\n    }\r\n\r\n    // Integers:\r\n\r\n    /*\r\n    there are two types of integers in solidity -> int and uint (unsigned integers) \r\n\r\n    int -> takes both positive and negative values                           uint -> takes only positive values\r\n    signed and unsigned integers can be of various sizes.\r\n    int8 to int256                                                           uint8 to uint256 \r\n    // yani integers ka size 8 bits se 256 bits tak jaa sakta hai\r\n\r\n    // it increases by 8 -> 8 bits, 16 bits, 24 bits , 32 bits ..... 256 bits\r\n\r\n    int -> alias to int256 yani simple int ka matlab hai ki ye 256 bit wala integer hai, similarly uint -> alias to uint256\r\n\r\n    By default, an int is initialized to 0.\r\n\r\n    Overflow get detected at compile time.\r\n    */\r\n \r\n    /* Range of integers:\r\n    int8 : -128 to 127     uint8 : 0 to 255\r\n    int16 : -32768 to 32767   uint16 : 0 to 65535\r\n\r\n    formula: for int -> -2^(n-1)-1 to 2^(n-1)-1         for uint -> 0 to 2^(n)-1\r\n    */\r\n\r\n    // int8 = 128 throw compilation error\r\n    // uint8 = 256 throw compilation error\r\n    // uint8 = -23 cannot take signed value in unsigned integers\r\n\r\n    /* Operators used with integers:\r\n\r\n    Comparisons: <=, <, ==, !=, >=, > (evaluate to bool)\r\n    Bit operators: &, |, ^ (bitwise exclusive or) , ~ (bitwise negation)\r\n\r\n    Arithmetic operators: +, -, unary -, unary +, *, /, % (remainder), ** (exponentiation), << (left shift), >> (right shift)  \r\n\r\n\r\n    */\r\n\r\n    /* Overflow:\r\n\r\n    pehle 0.5.0 versions me ye hota tha ki for example, I have taken uint count = 255; -> now if I run a setter function and increment its value\r\n    to is count ki value ko 0 kr diya jata tha \r\n    but after 0.8.0 versions, agar ham ye cheez krne ki koshish krte hain to transaction fail ho jata hai -> aur value 255 hi rehti hai\r\n    */\r\n\r\n    \r\n\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"Constructor.sol": {
				"constructors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "newage",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Constructor.sol\":134:2651  contract constructors{\r... */\n  mstore(0x40, 0x80)\n    /* \"Constructor.sol\":771:824  constructor(uint newage){\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"Constructor.sol\":810:816  newage */\n  dup1\n    /* \"Constructor.sol\":806:809  age */\n  0x00\n    /* \"Constructor.sol\":806:816  age=newage */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"Constructor.sol\":771:824  constructor(uint newage){\r... */\n  pop\n    /* \"Constructor.sol\":134:2651  contract constructors{\r... */\n  jump(tag_6)\n    /* \"#utility.yul\":7:150   */\ntag_8:\n  0x00\n    /* \"#utility.yul\":95:101   */\n  dup2\n    /* \"#utility.yul\":89:102   */\n  mload\n    /* \"#utility.yul\":80:102   */\n  swap1\n  pop\n    /* \"#utility.yul\":111:144   */\n  tag_10\n    /* \"#utility.yul\":138:143   */\n  dup2\n    /* \"#utility.yul\":111:144   */\n  tag_11\n  jump\t// in\ntag_10:\n    /* \"#utility.yul\":70:150   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":156:440   */\ntag_3:\n  0x00\n    /* \"#utility.yul\":275:277   */\n  0x20\n    /* \"#utility.yul\":263:272   */\n  dup3\n    /* \"#utility.yul\":254:261   */\n  dup5\n    /* \"#utility.yul\":250:273   */\n  sub\n    /* \"#utility.yul\":246:278   */\n  slt\n    /* \"#utility.yul\":243:245   */\n  iszero\n  tag_13\n  jumpi\n    /* \"#utility.yul\":291:292   */\n  0x00\n    /* \"#utility.yul\":288:289   */\n  dup1\n    /* \"#utility.yul\":281:293   */\n  revert\n    /* \"#utility.yul\":243:245   */\ntag_13:\n    /* \"#utility.yul\":334:335   */\n  0x00\n    /* \"#utility.yul\":359:423   */\n  tag_14\n    /* \"#utility.yul\":415:422   */\n  dup5\n    /* \"#utility.yul\":406:412   */\n  dup3\n    /* \"#utility.yul\":395:404   */\n  dup6\n    /* \"#utility.yul\":391:413   */\n  add\n    /* \"#utility.yul\":359:423   */\n  tag_8\n  jump\t// in\ntag_14:\n    /* \"#utility.yul\":349:423   */\n  swap2\n  pop\n    /* \"#utility.yul\":305:433   */\n  pop\n    /* \"#utility.yul\":233:440   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":446:523   */\ntag_15:\n  0x00\n    /* \"#utility.yul\":512:517   */\n  dup2\n    /* \"#utility.yul\":501:517   */\n  swap1\n  pop\n    /* \"#utility.yul\":491:523   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":529:651   */\ntag_11:\n    /* \"#utility.yul\":602:626   */\n  tag_18\n    /* \"#utility.yul\":620:625   */\n  dup2\n    /* \"#utility.yul\":602:626   */\n  tag_15\n  jump\t// in\ntag_18:\n    /* \"#utility.yul\":595:600   */\n  dup2\n    /* \"#utility.yul\":592:627   */\n  eq\n    /* \"#utility.yul\":582:584   */\n  tag_19\n  jumpi\n    /* \"#utility.yul\":641:642   */\n  0x00\n    /* \"#utility.yul\":638:639   */\n  dup1\n    /* \"#utility.yul\":631:643   */\n  revert\n    /* \"#utility.yul\":582:584   */\ntag_19:\n    /* \"#utility.yul\":572:651   */\n  pop\n  jump\t// out\n    /* \"Constructor.sol\":134:2651  contract constructors{\r... */\ntag_6:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Constructor.sol\":134:2651  contract constructors{\r... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122054bdf50d51ea7d95d85e6c66675d8bab3a5a103a7f00ad13f61be46668ea051964736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:654:1",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "70:80:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "80:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "89:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "89:13:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "80:5:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "138:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "111:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "111:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "111:33:1"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "48:6:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "56:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "64:5:1",
														"type": ""
													}
												],
												"src": "7:143:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "233:207:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "279:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "288:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "291:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "281:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "281:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "281:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "254:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "263:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "250:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "250:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "275:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "246:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "246:32:1"
															},
															"nodeType": "YulIf",
															"src": "243:2:1"
														},
														{
															"nodeType": "YulBlock",
															"src": "305:128:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "320:15:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "334:1:1",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "324:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "349:74:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "395:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "406:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "391:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "391:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "415:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "359:31:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "359:64:1"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "349:6:1"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "203:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "214:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "226:6:1",
														"type": ""
													}
												],
												"src": "156:284:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "491:32:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "501:16:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "512:5:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "501:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "473:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "483:7:1",
														"type": ""
													}
												],
												"src": "446:77:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "572:79:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "629:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "638:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "641:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "631:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "631:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "631:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "595:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "620:5:1"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "602:17:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "602:24:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "592:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "592:35:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "585:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "585:43:1"
															},
															"nodeType": "YulIf",
															"src": "582:2:1"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "565:5:1",
														"type": ""
													}
												],
												"src": "529:122:1"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b5060405160dc38038060dc8339818101604052810190602d9190604c565b80600081905550506090565b600081519050604681607c565b92915050565b600060208284031215605d57600080fd5b60006069848285016039565b91505092915050565b6000819050919050565b6083816072565b8114608d57600080fd5b50565b603f80609d6000396000f3fe6080604052600080fdfea264697066735822122054bdf50d51ea7d95d85e6c66675d8bab3a5a103a7f00ad13f61be46668ea051964736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0xDC CODESIZE SUB DUP1 PUSH1 0xDC DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH1 0x2D SWAP2 SWAP1 PUSH1 0x4C JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP PUSH1 0x90 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x46 DUP2 PUSH1 0x7C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH1 0x5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x69 DUP5 DUP3 DUP6 ADD PUSH1 0x39 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x83 DUP2 PUSH1 0x72 JUMP JUMPDEST DUP2 EQ PUSH1 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x3F DUP1 PUSH1 0x9D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD 0xBD CREATE2 0xD MLOAD 0xEA PUSH30 0x95D85E6C66675D8BAB3A5A103A7F00AD13F61BE46668EA051964736F6C63 NUMBER STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "134:2517:0:-:0;;;771:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;810:6;806:3;:10;;;;771:53;134:2517;;7:143:1;;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;70:80;;;;:::o;156:284::-;;275:2;263:9;254:7;250:23;246:32;243:2;;;291:1;288;281:12;243:2;334:1;359:64;415:7;406:6;395:9;391:22;359:64;:::i;:::-;349:74;;305:128;233:207;;;;:::o;446:77::-;;512:5;501:16;;491:32;;;:::o;529:122::-;602:24;620:5;602:24;:::i;:::-;595:5;592:35;582:2;;641:1;638;631:12;582:2;572:79;:::o;134:2517:0:-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea264697066735822122054bdf50d51ea7d95d85e6c66675d8bab3a5a103a7f00ad13f61be46668ea051964736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD 0xBD CREATE2 0xD MLOAD 0xEA PUSH30 0x95D85E6C66675D8BAB3A5A103A7F00AD13F61BE46668EA051964736F6C63 NUMBER STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "134:2517:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 134,
									"end": 2651,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 771,
									"end": 824,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 771,
									"end": 824,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 771,
									"end": 824,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 771,
									"end": 824,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 771,
									"end": 824,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 771,
									"end": 824,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 771,
									"end": 824,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 771,
									"end": 824,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 771,
									"end": 824,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 810,
									"end": 816,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 806,
									"end": 809,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 806,
									"end": 816,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 806,
									"end": 816,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 806,
									"end": 816,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 806,
									"end": 816,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 771,
									"end": 824,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 7,
									"end": 150,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 7,
									"end": 150,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7,
									"end": 150,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 95,
									"end": 101,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 89,
									"end": 102,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 80,
									"end": 102,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 80,
									"end": 102,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 111,
									"end": 144,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 138,
									"end": 143,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 111,
									"end": 144,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "tag",
									"source": 1,
									"value": "10"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 70,
									"end": 150,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 70,
									"end": 150,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 70,
									"end": 150,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 70,
									"end": 150,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 70,
									"end": 150,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 156,
									"end": 440,
									"name": "tag",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 156,
									"end": 440,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 156,
									"end": 440,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 275,
									"end": 277,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 263,
									"end": 272,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 254,
									"end": 261,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 250,
									"end": 273,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 246,
									"end": 278,
									"name": "SLT",
									"source": 1
								},
								{
									"begin": 243,
									"end": 245,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 243,
									"end": 245,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "13"
								},
								{
									"begin": 243,
									"end": 245,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 291,
									"end": 292,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 288,
									"end": 289,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 281,
									"end": 293,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 243,
									"end": 245,
									"name": "tag",
									"source": 1,
									"value": "13"
								},
								{
									"begin": 243,
									"end": 245,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 334,
									"end": 335,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 359,
									"end": 423,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 415,
									"end": 422,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 406,
									"end": 412,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 395,
									"end": 404,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 391,
									"end": 413,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 359,
									"end": 423,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 359,
									"end": 423,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 359,
									"end": 423,
									"name": "tag",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 359,
									"end": 423,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 349,
									"end": 423,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 349,
									"end": 423,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 305,
									"end": 433,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 233,
									"end": 440,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 233,
									"end": 440,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 233,
									"end": 440,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 233,
									"end": 440,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 233,
									"end": 440,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 446,
									"end": 523,
									"name": "tag",
									"source": 1,
									"value": "15"
								},
								{
									"begin": 446,
									"end": 523,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 446,
									"end": 523,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 512,
									"end": 517,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 501,
									"end": 517,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 501,
									"end": 517,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 491,
									"end": 523,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 491,
									"end": 523,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 491,
									"end": 523,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 491,
									"end": 523,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 529,
									"end": 651,
									"name": "tag",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 529,
									"end": 651,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 602,
									"end": 626,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "18"
								},
								{
									"begin": 620,
									"end": 625,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 602,
									"end": 626,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "15"
								},
								{
									"begin": 602,
									"end": 626,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 602,
									"end": 626,
									"name": "tag",
									"source": 1,
									"value": "18"
								},
								{
									"begin": 602,
									"end": 626,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 595,
									"end": 600,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 592,
									"end": 627,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 582,
									"end": 584,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "19"
								},
								{
									"begin": 582,
									"end": 584,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 641,
									"end": 642,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 638,
									"end": 639,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 631,
									"end": 643,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 582,
									"end": 584,
									"name": "tag",
									"source": 1,
									"value": "19"
								},
								{
									"begin": 582,
									"end": 584,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 572,
									"end": 651,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 572,
									"end": 651,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 2651,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122054bdf50d51ea7d95d85e6c66675d8bab3a5a103a7f00ad13f61be46668ea051964736f6c63430008000033",
									".code": [
										{
											"begin": 134,
											"end": 2651,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 134,
											"end": 2651,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 134,
											"end": 2651,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 134,
											"end": 2651,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 134,
											"end": 2651,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 134,
											"end": 2651,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Constructor.sol\":\"constructors\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Constructor.sol\":{\"keccak256\":\"0x3b70d48040b6c8d5b5669981486f618ea0c5e25c436e20d52268a67ed7cb6daa\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://6e32355a7e4b4502b3d7bbd40d5aa1a43a8eb4debc872735e35d8688b1984060\",\"dweb:/ipfs/QmX6dta9iNKxuci8x5mUeA3D8H79KTS1YTUUuDN3W56Z7G\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 3,
								"contract": "Constructor.sol:constructors",
								"label": "age",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"Constructor.sol": {
				"ast": {
					"absolutePath": "Constructor.sol",
					"exportedSymbols": {
						"constructors": [
							14
						]
					},
					"id": 15,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">",
								"0.5",
								".0",
								"<=",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:33:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 14,
							"linearizedBaseContracts": [
								14
							],
							"name": "constructors",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 3,
									"mutability": "mutable",
									"name": "age",
									"nodeType": "VariableDeclaration",
									"scope": 14,
									"src": "162:8:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "162:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 12,
										"nodeType": "Block",
										"src": "795:29:0",
										"statements": [
											{
												"expression": {
													"id": 10,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 8,
														"name": "age",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "806:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 9,
														"name": "newage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "810:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "806:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 11,
												"nodeType": "ExpressionStatement",
												"src": "806:10:0"
											}
										]
									},
									"id": 13,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "newage",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "783:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "783:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "782:13:0"
									},
									"returnParameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:0:0"
									},
									"scope": 14,
									"src": "771:53:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 15,
							"src": "134:2517:0"
						}
					],
					"src": "97:2554:0"
				},
				"id": 0
			}
		}
	}
}